{
	"info": {
		"name": "Chat Application API",
		"description": "Complete API collection for Chat Application with user authentication and messaging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has success field\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "Check if backend server is running"
			},
			"response": []
		},
		{
			"name": "User Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"OTP sent message received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"OTP has been sent\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"fullName\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"username\": \"johndoe\",\n  \"password\": \"password123\",\n  \"confirmPassword\": \"password123\",\n  \"gender\": \"male\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"register"
					]
				},
				"description": "Register a new user - sends OTP to email for verification"
			},
			"response": []
		},
		{
			"name": "Verify OTP",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Account created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Account created successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"otp\": \"123456\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/verify",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"verify"
					]
				},
				"description": "Verify OTP sent during registration"
			},
			"response": []
		},
		{
			"name": "Resend OTP",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/resendOTP",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"resendOTP"
					]
				},
				"description": "Resend OTP if previous one expired or was lost"
			},
			"response": []
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Login successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"    ",
							"    // Store user ID for later requests",
							"    if (jsonData._id) {",
							"        pm.collectionVariables.set(\"userId\", jsonData._id);",
							"    }",
							"});",
							"",
							"pm.test(\"Token cookie is set\", function () {",
							"    pm.expect(pm.cookies.has('token')).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"login"
					]
				},
				"description": "Login user and receive authentication token"
			},
			"response": []
		},
		{
			"name": "Get Other Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						""
					]
				},
				"description": "Get list of all other users (requires authentication)"
			},
			"response": []
		},
		{
			"name": "Send Message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Message created\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.newMessage).to.exist;",
							"    pm.expect(jsonData.newMessage.message).to.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"message\": \"Hello! This is a test message.\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/message/send/:receiverId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"message",
						"send",
						":receiverId"
					],
					"variable": [
						{
							"key": "receiverId",
							"value": "USER_ID_HERE",
							"description": "ID of the user to send message to"
						}
					]
				},
				"description": "Send a message to another user (requires authentication)"
			},
			"response": []
		},
		{
			"name": "Get Messages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/message/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"message",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "USER_ID_HERE",
							"description": "ID of the user to get conversation with"
						}
					]
				},
				"description": "Get all messages in conversation with a specific user (requires authentication)"
			},
			"response": []
		},
		{
			"name": "User Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Logout successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.include(\"Logged out successfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/user/logout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"user",
						"logout"
					]
				},
				"description": "Logout user and clear authentication token"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}